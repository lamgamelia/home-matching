scalar GraphQLDate


type Project{
    id: Int!
    title: String!
    company: String!
    propertyType: String!
    propertySize: Int!
    designStyle1: String!
    designStyle2: String!
    noOfBedrooms: Int! 
    created: GraphQLDate!
}

input ProjectInput{
    title: String!
    company: String!
    propertyType: String!
    propertySize: Int!
    designStyle1: String!
    designStyle2: String!
    noOfBedrooms: Int! 
} 

type Message{
    _id: ID!
    id: Int!
    name: String!
    email: String!
    subject: String!
    message: String
    datetime: GraphQLDate!
}

input InputMessage {
    name: String!
    email: String!
    subject: String!
    message: String
    datetime: GraphQLDate!
}

type User{
    id: ID!
    email: String!
    token: String!
    username: String!
    createdAt: String!
}

input RegisterInput{
    username: String!
    password: String!
    confirmPassword: String!
    email: String!
}

type Query{
    projectList: [Project!]!
    projectView(id: String!): Project!
    listMessage: [Message]!
}

type Mutation {
    projectAdd(newProject: ProjectInput!):Project!
    addMessage(newMessage: InputMessage): Message
    register(registerInput: RegisterInput): User!
}